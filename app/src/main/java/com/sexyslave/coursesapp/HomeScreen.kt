package com.sexyslave.coursesapp

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.outlined.FavoriteBorder
import androidx.compose.material.icons.outlined.Home
import androidx.compose.material.icons.outlined.Person
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.PlatformTextStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import cafe.adriel.voyager.core.screen.Screen
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.sexyslave.coursesapp.features.courses.CoursesUiState
import com.sexyslave.coursesapp.features.courses.CoursesViewModel
import com.sexyslave.domain.model.Course // Correct import for your domain model
import org.koin.androidx.compose.koinViewModel

object HomeScreen : Screen {
    @Composable
    override fun Content() {
        // ViewModel –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤–Ω—É—Ç—Ä–∏ CoursesScreen
        CoursesScreen()
    }
}

@Composable
fun CoursesScreen(viewModel: CoursesViewModel = koinViewModel()) {
    var selectedItemIndex by remember { mutableStateOf(0) }
    var searchQuery by remember { mutableStateOf("") }
    val coursesState by viewModel.coursesState.collectAsState()
    val navigator = LocalNavigator.currentOrThrow // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1E1E1E))
    ) {
        Spacer(modifier = Modifier.height(10.dp))

        // üîé SearchBar + Filter
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 12.dp, top = 36.dp, end = 12.dp, bottom = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextField(
                value = searchQuery,
                onValueChange = {
                    searchQuery = it
                    // viewModel.searchCourses(it) // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏/–∫–æ–≥–¥–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ –ø–æ–∏—Å–∫ –≤ ViewModel
                },
                placeholder = { Text("Search courses...", style = TextStyle(fontSize = 16.sp, platformStyle = PlatformTextStyle(includeFontPadding = false))) },
                leadingIcon = {
                    Icon(painter = painterResource(R.drawable.search_24dp_ffffff), contentDescription = "Search Icon", modifier = Modifier.size(24.dp), tint = Color.White)
                },
                modifier = Modifier
                    .weight(1f)
                    .height(48.dp),
                shape = RoundedCornerShape(24.dp),
                textStyle = TextStyle(fontSize = 16.sp, platformStyle = PlatformTextStyle(includeFontPadding = false)),
                colors = TextFieldDefaults.colors(
                    focusedTextColor = Color.White,
                    unfocusedTextColor = Color.White,
                    cursorColor = Color.White,
                    focusedContainerColor = Color(0xFF2C2C2C),
                    unfocusedContainerColor = Color(0xFF2C2C2C),
                    disabledContainerColor = Color(0xFF2C2C2C),
                    focusedIndicatorColor = Color.Transparent,
                    unfocusedIndicatorColor = Color.Transparent,
                    disabledIndicatorColor = Color.Transparent,
                    focusedLeadingIconColor = Color(0xFF9E9E9E),
                    unfocusedLeadingIconColor = Color(0xFF9E9E9E),
                    focusedPlaceholderColor = Color(0xFF9E9E9E),
                    unfocusedPlaceholderColor = Color(0xFF9E9E9E)
                )
            )
            Spacer(modifier = Modifier.width(8.dp))
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .background(color = Color(0xFF2C2C2C), shape = CircleShape),
                contentAlignment = Alignment.Center
            ) {
                IconButton(onClick = { /* TODO: –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */ }) {
                    Icon(
                        painter = painterResource(R.drawable.filter_alt_24dp_ffffff),
                        contentDescription = "Filter courses",
                        tint = Color.White,
                        modifier = Modifier.size(24.dp)
                    )
                }
            }
        }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp),
            horizontalArrangement = Arrangement.End
        ) {
            Row(
                modifier = Modifier
                    .background(color = Color(0x002C2C2C), shape = RoundedCornerShape(8.dp))
                    .clickable { viewModel.sortCoursesByPublishDate() } // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
                    .padding(horizontal = 12.dp, vertical = 6.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "–ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                    color = Color.Green,
                    fontSize = 14.sp
                )
                Spacer(modifier = Modifier.width(4.dp))
                Icon(
                    painter = painterResource(R.drawable.swap_vert_24dp_ffffff),
                    contentDescription = "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É",
                    tint = Color.Green,
                    modifier = Modifier.size(18.dp)
                )
            }
        }

        // üìö –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–∫–∏
        Box(modifier = Modifier.weight(1f).fillMaxWidth()) {
            when (val state = coursesState) {
                is CoursesUiState.Loading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }
                is CoursesUiState.Success -> {
                    if (state.courses.isEmpty()) {
                        Text(
                            text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤",
                            color = Color.White,
                            fontSize = 18.sp,
                            modifier = Modifier.align(Alignment.Center)
                        )
                    } else {
                        LazyColumn(modifier = Modifier.fillMaxSize()) {
                            items(state.courses, key = { course -> course.id }) { course ->
                                CourseCard(course = course, viewModel = viewModel)
                            }
                        }
                    }
                }
                is CoursesUiState.Error -> {
                    Text(
                        text = "–û—à–∏–±–∫–∞: ${state.message}",
                        color = Color.Red,
                        fontSize = 18.sp,
                        modifier = Modifier.align(Alignment.Center).padding(16.dp)
                    )
                }
            }
        }


        // ‚¨áÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–Ω–∏–∑—É
        Divider(color = Color.DarkGray, thickness = 1.dp)
        NavigationBar(
            containerColor = Color(0xFF2C2C2C),
        ) {
            NavigationBarItem(
                selected = selectedItemIndex == 0,
                onClick = { selectedItemIndex = 0 },
                icon = { Icon(Icons.Outlined.Home, contentDescription = "–ì–ª–∞–≤–Ω–∞—è") },
                label = { Text("–ì–ª–∞–≤–Ω–∞—è") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF388E3C),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF388E3C),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
            NavigationBarItem(
                selected = selectedItemIndex == 1,
                onClick =
                    { selectedItemIndex = 1

                        navigator.push(FavoritesScreen)
                          },
                icon = { Icon(painterResource(R.drawable.bookmark_24dp_ffffff), contentDescription = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", modifier = Modifier.size(24.dp)) },
                label = { Text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF388E3C),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF388E3C),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
            NavigationBarItem(
                selected = selectedItemIndex == 2,
                onClick = { selectedItemIndex = 2 },
                icon = { Icon(Icons.Outlined.Person, contentDescription = "–ê–∫–∫–∞—É–Ω—Ç") },
                label = { Text("–ê–∫–∫–∞—É–Ω—Ç") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF388E3C),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF388E3C),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
        }
    }
}

@Composable
fun CourseCard(course: Course, viewModel: CoursesViewModel) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp)
            .clickable { /* TODO: Handle course click / navigation */ },
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFF2C2C2C))
    ) {
        Column {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(160.dp)
                    .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)) // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏—Ö —É–≥–ª–æ–≤
            ) {
                Image(
                    painter = painterResource(id = R.drawable.card1), // –ò—Å–ø–æ–ª—å–∑—É–µ–º course.imageRes –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                    contentDescription = course.title,
                    contentScale = ContentScale.Crop,
                    modifier = Modifier.fillMaxSize()
                )

                Box(
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(10.dp)
                        .background(
                            color = Color.Black.copy(alpha = 0.5f),
                            shape = RoundedCornerShape(24.dp)
                        )
                        .padding(2.dp)
                ) {
                    IconButton(
                        onClick = { viewModel.toggleFavorite(course.id) }, // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                        modifier = Modifier.size(24.dp)
                    ) {
                        Icon(
                            painter = painterResource(R.drawable.bookmark_24dp_ffffff),
                            contentDescription = "Add to favorites",
                            tint = if (course.hasLike) Color(0xFF388E3C) else Color.White, // –ó–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                            modifier = Modifier.fillMaxSize()
                        )
                    }
                }

                Row(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        modifier = Modifier
                            .background(
                                color = Color.Black.copy(alpha = 0.5f),
                                shape = RoundedCornerShape(16.dp)
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = android.R.drawable.star_on), // Material icon for star
                            contentDescription = "Rating",
                            tint = Color.Green, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —è—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –∑–≤–µ–∑–¥—ã
                            modifier = Modifier.size(14.dp)
                        )
                        Text(
                            text = "${course.rating}", // –ò—Å–ø–æ–ª—å–∑—É–µ–º course.rating
                            color = Color.White,
                            fontWeight = FontWeight.Bold,
                            fontSize = 12.sp,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }
                    Spacer(modifier = Modifier.width(8.dp))
                    Box(
                        modifier = Modifier
                            .background(
                                color = Color.Black.copy(alpha = 0.5f),
                                shape = RoundedCornerShape(16.dp)
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text(
                            text = course.publishDate, // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º publishDate –∏–ª–∏ startDate –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É
                            color = Color.White,
                            fontSize = 12.sp
                        )
                    }
                }
            }

            Text(
                text = course.title,
                color = Color.White,
                fontWeight = FontWeight.Bold,
                fontSize = 18.sp,
                modifier = Modifier.padding(start = 12.dp, end = 12.dp, top = 12.dp)
            )
            Text(
                text = course.description, // –ò—Å–ø–æ–ª—å–∑—É–µ–º course.description
                color = Color.LightGray,
                fontSize = 14.sp,
                maxLines = 2,
                overflow = TextOverflow.Ellipsis,
                modifier = Modifier.padding(start = 12.dp, end = 12.dp, top = 8.dp, bottom = 8.dp)
            )
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 12.dp, end = 12.dp, top = 8.dp, bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text("${course.price} ‚ÇΩ", color = Color.White, fontWeight = FontWeight.Bold)
                Text(
                    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚ûú",
                    color = Color(0xFF388E3C),
                    fontWeight = FontWeight.Medium,
                    modifier = Modifier.clickable { /* TODO: Handle details click */ }
                )
            }
        }
    }
}

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ drawable —Ä–µ—Å—É—Ä—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ:
// R.drawable.search_24dp_ffffff
// R.drawable.filter_alt_24dp_ffffff
// R.drawable.swap_vert_24dp_ffffff
// R.drawable.bookmark_24dp_ffffff (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
// R.drawable.card1 (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞)
// android.R.drawable.star_on (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –∑–≤–µ–∑–¥—ã)
// Icons.Filled.Favorite –∏ Icons.Outlined.FavoriteBorder (–∏–∑ material-icons-extended)
