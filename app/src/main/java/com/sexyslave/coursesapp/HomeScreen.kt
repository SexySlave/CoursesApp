package com.sexyslave.coursesapp

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite // –°—Ç–∞—Ä–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Star
import androidx.compose.material.icons.outlined.FavoriteBorder // –î–ª—è "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
import androidx.compose.material.icons.outlined.Home // –î–ª—è "–ì–ª–∞–≤–Ω–∞—è"
import androidx.compose.material.icons.outlined.Person // –î–ª—è "–ê–∫–∫–∞—É–Ω—Ç"
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.NavigationBarItemDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
// import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import cafe.adriel.voyager.core.screen.Screen

object HomeScreen : Screen {
    @Composable
    override fun Content() {
        CoursesScreen()
    }
}

@Composable
fun CoursesScreen() {
    var selectedItemIndex by remember { mutableStateOf(0) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1E1E1E))
    ) {
        // üîé SearchBar + Sort
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextField(
                value = "",
                onValueChange = {},
                placeholder = { Text("Search courses...", color = Color.Gray) },
                leadingIcon = {
                    Icon(Icons.Default.Search, contentDescription = null, tint = Color.Gray)
                },
                modifier = Modifier
                    .weight(1f)
                    .height(48.dp),
//                colors = TextFieldDefaults.textFieldColors(
//                    containerColor = Color.DarkGray,
//                    focusedIndicatorColor = Color.Transparent,
//                    unfocusedIndicatorColor = Color.Transparent,
//                )
            )
            Spacer(modifier = Modifier.width(8.dp))
            IconButton(onClick = { /* TODO: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */ }) {
                Icon(Icons.Filled.Favorite, contentDescription = "Sort", tint = Color.White) // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏?
            }
        }

        Text(
            text = "–ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            color = Color.Green,
            fontSize = 14.sp,
            modifier = Modifier.padding(start = 16.dp, bottom = 8.dp)
        )

        // üìö –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
        LazyColumn(
            modifier = Modifier.weight(1f) // –î–∞–µ–º LazyColumn –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–µ—Å
        ) {
            items(sampleCourses) { course ->
                CourseCard(course)
            }
        }

        // ‚¨áÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–Ω–∏–∑—É
        Divider(color = Color.DarkGray, thickness = 1.dp) // –í–µ—Ä—Ö–Ω—è—è —Å–µ—Ä–∞—è –ø–æ–ª–æ—Å–∫–∞
        NavigationBar(
            containerColor = Color(0xFF2C2C2C), // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –±–∞—Ä–∞
        ) {
            NavigationBarItem(
                selected = selectedItemIndex == 0,
                onClick = { selectedItemIndex = 0 },
                icon = { Icon(Icons.Outlined.Home, contentDescription = "–ì–ª–∞–≤–Ω–∞—è") },
                label = { Text("–ì–ª–∞–≤–Ω–∞—è") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF388E3C),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF388E3C),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                )
            )
            NavigationBarItem(
                selected = selectedItemIndex == 1,
                onClick = { selectedItemIndex = 1 },
                icon = { Icon(painterResource( R.drawable.bookmark_24dp_ffffff), contentDescription = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", modifier = Modifier.size(24.dp))  },
                label = { Text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF388E3C),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF388E3C),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
            NavigationBarItem(
                selected = selectedItemIndex == 2,
                onClick = { selectedItemIndex = 2 },
                icon = { Icon(Icons.Outlined.Person, contentDescription = "–ê–∫–∫–∞—É–Ω—Ç") },
                label = { Text("–ê–∫–∫–∞—É–Ω—Ç") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF388E3C),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF388E3C),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
        }
    }
}

@Composable
fun CourseCard(course: Course) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp),
        shape = RoundedCornerShape(12.dp), // –û–±—â–µ–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        colors = CardDefaults.cardColors(containerColor = Color(0xFF2C2C2C))
    ) {
        Column {
            Box( // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–≤–µ—Ä–ª–µ–µ–≤
                modifier = Modifier
                    .fillMaxWidth()
                    .height(160.dp)
                    .clip(RoundedCornerShape(12.dp)) // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≥–ª–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            ) {
                Image(
                    painter = painterResource(R.drawable.card1), // –ò—Å–ø–æ–ª—å–∑—É–µ–º course.imageRes
                    contentDescription = null,
                    contentScale = ContentScale.Crop,
                    modifier = Modifier.fillMaxSize()
                )

                // –ö–Ω–æ–ø–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
                Box(
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(6.dp) // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                        .background(
                            color = Color.Black.copy(alpha = 0.5f),
                            shape = RoundedCornerShape(12.dp) // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏
                        )
                        .padding(2.dp) // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∏–∫–æ–Ω–∫–∏
                ) {
                    IconButton(
                        onClick = { },
                        modifier = Modifier.size(20.dp) // –Ø–≤–Ω–æ —É–º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä IconButton
                    ) {
                        Icon(
                            painter = painterResource( R.drawable.bookmark_24dp_ffffff),
                            contentDescription = "Add to favorites",
                            tint = Color.White,
                            modifier = Modifier.fillMaxSize() // –ò–∫–æ–Ω–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç IconButton
                        )
                    }
                }

                // –û–≤–µ—Ä–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –¥–∞—Ç–æ–π –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
                Row(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –§–æ–Ω –¥–ª—è –∑–≤–µ–∑–¥ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
                    Row(
                        modifier = Modifier
                            .background(
                                color = Color.Black.copy(alpha = 0.5f),
                                shape = RoundedCornerShape(16.dp) // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp), // –ù–µ–º–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞–¥–¥–∏–Ω–≥
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            Icons.Default.Star,
                            contentDescription = null,
                            tint = Color.White,
                            modifier = Modifier.size(14.dp) // –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–º –∑–≤–µ–∑–¥—É
                        )
                        Text(
                            text = "${course.rating}",
                            color = Color.White,
                            fontWeight = FontWeight.Bold,
                            fontSize = 12.sp,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }

                    Spacer(modifier = Modifier.width(8.dp))

                    // –§–æ–Ω –¥–ª—è –¥–∞—Ç—ã
                    Box(
                        modifier = Modifier
                            .background(
                                color = Color.Black.copy(alpha = 0.5f),
                                shape = RoundedCornerShape(16.dp) // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp) // –ù–µ–º–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞–¥–¥–∏–Ω–≥
                    ) {
                        Text(
                            text = course.date,
                            color = Color.White,
                            fontSize = 12.sp
                        )
                    }
                }
            }

            Text(
                text = course.title,
                color = Color.White,
                fontWeight = FontWeight.Bold,
                fontSize = 18.sp,
                modifier = Modifier.padding(start = 12.dp, end = 12.dp, top = 12.dp)
            )
            Text(
                text = course.description,
                color = Color.LightGray,
                fontSize = 14.sp,
                maxLines = 2,
                overflow = TextOverflow.Ellipsis,
                modifier = Modifier.padding(start = 12.dp, end = 12.dp, top = 8.dp, bottom = 8.dp)
            )
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 12.dp, end = 12.dp, top = 8.dp, bottom = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text("${course.price} ‚ÇΩ", color = Color.White, fontWeight = FontWeight.Bold)
                Text(
                    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚ûú",
                    color = Color(0xFF388E3C),
                    fontWeight = FontWeight.Medium
                )
            }
        }
    }
}



data class Course(
    val title: String,
    val description: String,
    val price: String,
    val rating: Double,
    val date: String,
    val imageRes: Int
)

val sampleCourses = listOf(
    Course(
        "Java-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω—É–ª—è",
        "–û—Å–≤–æ–π—Ç–µ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Java...",
        "999",
        4.9,
        "22 –ú–∞—è 2024",
        android.R.drawable.ic_menu_gallery
    ),
    Course(
        "3D-–¥–∂–µ–Ω–µ—Ä–∞–ª–∏—Å—Ç",
        "–û—Å–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—é 3D-–¥–∂–µ–Ω–µ—Ä–∞–ª–∏—Å—Ç–∞ –∏ —Å—Ç–∞–Ω—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º...",
        "12000",
        3.9,
        "10 –°–µ–Ω—Ç—è–±—Ä—è 2024",
        android.R.drawable.ic_menu_gallery
    )
)
