package com.sexyslave.coursesapp

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.outlined.FavoriteBorder
import androidx.compose.material.icons.outlined.Home
import androidx.compose.material.icons.outlined.Person
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource

import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import cafe.adriel.voyager.core.screen.Screen
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.sexyslave.coursesapp.features.courses.CoursesUiState
import com.sexyslave.coursesapp.features.courses.CoursesViewModel
import com.sexyslave.domain.model.Course // Correct import for your domain model
import org.koin.androidx.compose.koinViewModel

object FavoritesScreen : Screen { // Renamed from HomeScreen
    @Composable
    override fun Content() {
        FavoritesScreenContent() // Renamed from CoursesScreen
    }
}

@Composable
fun FavoritesScreenContent(viewModel: CoursesViewModel = koinViewModel()) { // Renamed from CoursesScreen
    var selectedItemIndex by remember { mutableStateOf(1) } // Default to "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" selected
    val coursesState by viewModel.coursesState.collectAsState()
    val navigator = LocalNavigator.currentOrThrow // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF1E1E1E))
    ) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π Text)
        Text(
            text = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
            color = Color.White,
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .padding(start = 16.dp, top = 48.dp, bottom = 16.dp) // Adjusted padding
        )

        // üìö –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–∫–∏
        Box(modifier = Modifier.weight(1f).fillMaxWidth()) {
            when (val state = coursesState) {
                is CoursesUiState.Loading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }
                is CoursesUiState.Success -> {
                    val favoriteCourses = state.courses.filter { it.hasLike }
                    if (favoriteCourses.isEmpty()) {
                        Text(
                            text = "–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤",
                            color = Color.White,
                            fontSize = 18.sp,
                            modifier = Modifier.align(Alignment.Center)
                        )
                    } else {
                        LazyColumn(modifier = Modifier.fillMaxSize()) {
                            items(favoriteCourses, key = { course -> course.id }) { course ->
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ CourseCard, —á—Ç–æ –∏ –Ω–∞ HomeScreen
                                CourseCard(course = course, viewModel = viewModel)
                            }
                        }
                    }
                }
                is CoursesUiState.Error -> {
                    Text(
                        text = "–û—à–∏–±–∫–∞: ${state.message}",
                        color = Color.Red,
                        fontSize = 18.sp,
                        modifier = Modifier.align(Alignment.Center).padding(16.dp)
                    )
                }
            }
        }

        // ‚¨áÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–Ω–∏–∑—É (—Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –Ω–∞ HomeScreen, –Ω–æ selectedItemIndex –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–Ω–∞—á–µ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        Divider(color = Color.DarkGray, thickness = 1.dp)
        NavigationBar(
            containerColor = Color(0xFF2C2C2C),
        ) {
            NavigationBarItem(
                selected = selectedItemIndex == 0,
                onClick = {
                    selectedItemIndex = 0
                    // Check if HomeScreen is already in the stack and not the current screen
                    val homeScreenInStack = navigator.items.any { it is HomeScreen && it != navigator.lastItem }
                    if (navigator.canPop && homeScreenInStack) {
                        navigator.popUntil { it is HomeScreen }
                    } else {
                        navigator.push(HomeScreen)
                    } },

//                onClick = {
//                    selectedItemIndex = 0
//                    navigator.push(HomeScreen)
//                },

                icon = { Icon(Icons.Outlined.Home, contentDescription = "–ì–ª–∞–≤–Ω–∞—è") },
                label = { Text("–ì–ª–∞–≤–Ω–∞—è") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF12B956),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF12B956),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
            NavigationBarItem(
                selected = selectedItemIndex == 1,
                onClick = { selectedItemIndex = 1 /* No action needed, already here */ },
                icon = { Icon(painterResource(R.drawable.bookmark_24dp_ffffff), contentDescription = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", modifier = Modifier.size(24.dp)) },
                label = { Text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF12B956),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF12B956),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
            NavigationBarItem(
                selected = selectedItemIndex == 2,
                onClick = { selectedItemIndex = 2 /* TODO: Navigate to AccountScreen */ },
                icon = { Icon(Icons.Outlined.Person, contentDescription = "–ê–∫–∫–∞—É–Ω—Ç") },
                label = { Text("–ê–∫–∫–∞—É–Ω—Ç") },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = Color(0xFF12B956),
                    unselectedIconColor = Color.LightGray,
                    selectedTextColor = Color(0xFF12B956),
                    unselectedTextColor = Color.LightGray,
                    indicatorColor = Color.Transparent
                )
            )
        }
    }
}

// CourseCard –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ HomeScreen.kt. 
// –ï—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—â–µ–º —Ñ–∞–π–ª–µ, –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CourseCard –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –≤ —Ç–æ–º –∂–µ –ø–∞–∫–µ—Ç–µ
// –∏–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—â–∏–π composable —Ñ–∞–π–ª).
// –ï—Å–ª–∏ CourseCard –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ HomeScreen.kt, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ–≥–æ –ª–∏–±–æ:
// 1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞.
// 2. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±–∞ —ç–∫—Ä–∞–Ω–∞.
//
// @Composable
// fun CourseCard(course: Course, viewModel: CoursesViewModel) { ... } // –ö–æ–¥ –∏–∑ HomeScreen.kt

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ drawable —Ä–µ—Å—É—Ä—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ:
// R.drawable.bookmark_24dp_ffffff (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
// android.R.drawable.star_on (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –∑–≤–µ–∑–¥—ã)
// Icons.Filled.Favorite –∏ Icons.Outlined.FavoriteBorder (–∏–∑ material-icons-extended)

